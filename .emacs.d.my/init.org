#+title: emacs configuration
#+property: header-args:emacs-lisp :tangle /users/eddie/.emacs.d/init.el :mkdirp yes
#+options: num:nil
#+html_head <link rel="stylesheet" type"text/css" href=""/>

* basic shortcut

  |----------------------+----------------------------|
  | 명령어               | 단축키                     |
  |----------------------+----------------------------|
  | 텍스트 크기조절      | c-x c-0 누른 후 + 하거나 - |
  |----------------------+----------------------------|
  | 한줄실행             | c-x c-e                    |
  |----------------------+----------------------------|
  | 바로 실행            | m-: eval                   |
  |----------------------+----------------------------|
  | 명령어 찾기          | m-x                        |
  |----------------------+----------------------------|
  | 현재 단어 하이라이트 | m-s h .                    |
  |----------------------+----------------------------|
  | 정규식 하이라이트    | m-s h r                    |
  |----------------------+----------------------------|
  | 하이라이트 삭제      | m-s h u                    |
  |----------------------+----------------------------|
  | 파일 북마크 추가     | c-x r m                    |
  |----------------------+----------------------------|
  | bookmark jump        | c-x r b                    |
  |----------------------+----------------------------|
  | list bookmark        | c-x r l                    |
  |----------------------+----------------------------|
    rename-file
    describe-bindings =C-h b=

** dired 사용법
- =C-x d= 가 단축키
  =dired-listing-switches= : -al 기본이 ls -al 처럼 보이니 이걸 바꾸면 됨
  =C-x C-j= 바로 현재창에 dired 띄우기
  ^ : 상위 디렉토리로 이동
  J : 파일이름 검색해서 이동
  RET : 파일이나 디렉토리 열기
  M-RET : 다른 창에서 열기 S-RET 는 열고 포커스는 이동안함
  go : 프리뷰 모드로 esc하면 창 닫고 돌아감
  q : dired buffer bury
  gy : file type
  gr : buffer refresh
  M : chmod
  O : chown
  gG : change the group
  L : load an emacs lisp into emacs
  C : copy
  = : dired diff
  + : create a directory
  D : delete
  R : rename / move
  C-x C-q : vim 모드로 여러파일 이름 변화후 Z Z 하면 저장됨, 
  S : symlinc
  H : hardlink
  Z : do compress tar.gz
  c : compress selection to a specific file
  X : do shell command =!=
  m : mark
  u : unmark
  U : unmark all
  t : invert mark
  * : options
  */ : select directories
  %m : regex mark

  - =dired-listing-switches:= try =-agho --group-directories-first= 디렉토리 후 파일 보이게 하는것
  - dired single : dired buffer를 하나로 관리  
  - 특정 확장자를 emacs가 아닌 다른 프로그램으로 열어서 exwm이 열게도 가능\

  #+begin_src emacs-lisp
    ;;mac built in ls does not support group-directories-first
    ;;so brew install coreutils first
    (setq insert-directory-program "gls" dired-use-ls-dired t)
    (use-package dired-single)
    (use-package dired
      :ensure nil ;use-package가 install 안하게 함.
      :commands (dired dired-jump)
      :bind (("C-x C-j" . dired-jump))
      :custom ((dired-listing-switches "-al --group-directories-first"))
      :config
      (evil-collection-define-key 'normal 'dired-mode-map
        "h" 'dired-single-up-directory
        "l" 'dired-single-buffer))
    (use-package all-the-icons-dired
      :if (display-graphic-p)
      :hook (dired-mode . all-the-icons-dired-mode))
    ;png파일은 feh라는 툴로 열고...
    (use-package dired-open
      :config
      (setq dired-open-extensions '(("png" . "feh")
                                    ("mkv" . "mpv"))))
    ;hide dot files
    (use-package dired-hide-dotfiles
      :hook (dired-mode . dired-hide-dotfiles-mode)
      :config
      (evil-collection-define-key 'normal 'dired-mode-map
        "H" 'dired-hide-dotfiles-mode))
    
  #+end_src

    

* basic configuration

** clean up emacs user interface, make it minimal.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  ;(unless dw/is-termux
  (scroll-bar-mode -1)        ; disable visible scrollbar
  (tool-bar-mode -1)          ; disable the toolbar
  (tooltip-mode -1)           ; disable tooltips
  (set-fringe-mode 10)       ; give some breathing room

  (menu-bar-mode -1)            ; disable the menu bar

  ;; set up the visible bell
  (setq visible-bell nil)
  (setq ring-bell-function 'ignore)

#+end_src

** package setup

- use-package는
  ensure t은 package가 로컬에 없을때 다운로드 하게함
  init은 패키지 로드 전 실행랄 코드
  command 는 autoload명령으로 init과 config사이 동작
  config는 패키지 로드 후 실행할 내용
  bind는 m-x describe-personal-keybinding 에 키 바인딩 적재 시킴
  이것과 동일하게 일을 시키는건 아래와 같음
   init
   (bind-key "c-." 'ace-jumbp-mode))
  bind-keymap은 비슷한데 그 패키지에 정의된 keymap만 사용가능

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  ;; fix an issue accessing the elpa archive in termux
  ;(when dw/is-termux
  ;  (setq gnutls-algorithm-priority "normal:-vers-tls1.3"))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; initialize use-package on non-linux platforms
  (unless (package-installed-p 'use-package)
     (package-install 'use-package))
  (require 'use-package)

  ;; uncomment this to get a reading on packages that get loaded at startup
  ;;(setq use-package-verbose t)

  ;; on non-guix systems, "ensure" packages by default
  (setq use-package-always-ensure t)
#+end_src

** custom packages

#+begin_src emacs-lisp
  (custom-set-variables
   '(package-selected-packages
     '(evil-magit magit ag rg ripgrep hydra evil-collection undo-tree evil general all-the-icons-dired doom-modeline marginalia vertico command-log-mode use-package)))
  (custom-set-faces
   )
#+end_src

* interface settings

** set font 

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :family "d2coding" :height 130)
  (setq default-input-method "korean-hangul")
  (set-fontset-font t 'hangul (font-spec :name "d2coding"))
#+end_src

** line number

#+begin_src emacs-lisp
  (column-number-mode) 
  (global-display-line-numbers-mode t) ;t 는 시작시 묻지말고 셋하라는 의미
  (setq display-line-numbers-type 'relative)
  ;; enable line numbers for some modes
  (dolist (mode '(term-mode-hook
                  eshell-mode-hook
                  vterm-mode-hook
                  treemacs-mode-hook
                  shell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))
#+end_src

** mode line

#+begin_src emacs-lisp
  (require 'doom-modeline)
  (doom-modeline-mode 1)

  (use-package all-the-icons
    :if (display-graphic-p)
    :commands all-the-icons-install-fonts
    :init
    (unless (find-font (font-spec :name "all-the-icons"))
      (all-the-icons-install-fonts t)))


  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom (doom-modeline-height 15))
#+end_src

** Theme

#+begin_src emacs-lisp
  (use-package doom-themes)
  (load-theme 'doom-gruvbox 1)
#+end_src

** Delimiter

#+begin_src emacs-lisp
  (use-package  rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Helpful functions

#+begin_src emacs-lisp
  (use-package  which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0))

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Key settings

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup t)
  (general-create-definer my/leader-keys
    :keymaps '(normal insert visual emacs)
    ;:prefix "C-M"
    :global-prefix "C-SPC"))
  ;(my/leader-keys
  ; "ts" '(load-theme :which-key "choose theme")))

(use-package undo-tree
  :init
  (setq undo-tree-auto-save-history nil)
  (global-undo-tree-mode 1))
#+end_src

** Evil Mode

#+begin_src emacs-lisp
    (use-package evil
      ;; Pre-load configuration
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (setq evil-want-C-u-scroll t)
      (setq evil-want-C-i-jump nil)
      (setq evil-respect-visual-line-mode t)
      (setq evil-undo-system 'undo-tree)

      :config
      ;; Activate the Evil
      (evil-mode 1)

      ;; Set Emacs state modes
      (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
      (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

      ;; Use visual line motions even outside of visual-line-mode buffers
      (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

      (evil-set-initial-state 'messages-buffer-mode 'normal)
      (evil-set-initial-state 'dashboard-mode 'normal))

    (use-package evil-collection
      :after evil
      :config
      (evil-collection-init))

#+end_src

** easy motion
#+begin_src emacs-lisp

    ;;easymotion C-'를 트리거로 설정
    (use-package avy)
    (global-set-key (kbd "C-'") 'avy-goto-char-2)
#+end_src



** evil mc 멀티커서
#+begin_src emacs-lisp
    ;;evil-multiedit 힐스너 버전
    ;(use-package evil-multiedit)
    ;(evil-multiedit-default-keybinds)
 ;   (use-package evil-mc)
 ;   (global-evil-mc-mode 1)
  ;; evil-mc
 ; (evil-define-key '(normal visual) 'global
 ;   "gzm" #'evil-mc-make-all-cursors
 ;   "gzu" #'evil-mc-undo-all-cursors
 ;   "gzz" #'+evil/mc-toggle-cursors
 ;   "gzc" #'+evil/mc-make-cursor-here
 ;   "gzn" #'evil-mc-make-and-goto-next-cursor
 ;   "gzp" #'evil-mc-make-and-goto-prev-cursor
 ;   "gzN" #'evil-mc-make-and-goto-last-cursor
 ;   "gzP" #'evil-mc-make-and-goto-first-cursor)
 ; (with-eval-after-load 'evil-mc
 ;   (evil-define-key '(normal visual) evil-mc-key-map
 ;     (kbd "C-n") #'evil-mc-make-and-goto-next-cursor
 ;     (kbd "C-N") #'evil-mc-make-and-goto-last-cursor
 ;     (kbd "C-p") #'evil-mc-make-and-goto-prev-cursor
 ;     (kbd "C-P") #'evil-mc-make-and-goto-first-cursor))
#+end_src

* Completion System

** Vertico

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

  (use-package savehist
    :init
    (savehist-mode))

  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))

#+end_src

* Coding Environment

** Projectile

- projectile파일을 폴더에 넣으면 프로젝트로 인식함 .git이 있어도 됨
- 모든 프로젝타일 키를 =C-c p= 로 트리거하겠다
- =C-c p f= 이후 =M-o= 하면 메뉴가 많아지는데 스크롤 방법을 모름.
- counsel-projectil-rg =C-c p s r=


#+begin_src emacs-lisp
  ;https://youtu.be/INTu30BHZGk
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map) ;;모든 프로젝타일 키를 C-c p 로 트리거하겠다
    :init
    (when (file-directory-p "~/workspace")
      (setq projectile-project-search-path '("~/workspace")))
    (setq projectile-switch-project-action #'projectile-dired))

  ;C-c p f이후 M-o하면 메뉴가 많아지는데 스크롤 방법을 모름.
  ;counsel-projectil-rg = c-p-s-r
  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

** Commenting
- M-; 가 기본 emacs comment 설정인데 선택 없을시 좀 이상하게 동작함
- 그래서 요거 써서 =M-/= 로 하면 됨


#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** Language Modes

*** python-mode

- ensure nil의 의미는 use-package가 python-mode를 인스톨 하지 않게 함.
- python실행이 python3을 쓰게 함
- hook 으로 python-mode에 들어오면 lsp mode사용하게 함


#+begin_src emacs-lisp
  (use-package python-mode
    ;:ensure nil
    :hook (python-mode . lsp-deferred)
    ;:custom
    ;python-shell-interpreter "python3")
    ;(dap-python-excutable "python3")
    ;(dap-python-debugger 'debugpy)
    ;:config
    ;(require 'dap-python)
  )

#+end_src

Commands:
- Interactive Python shell: =M-x run-python= (C-c C-p or g z in evil-mode)
- python-shell-send-file =C-c C-l=
- python-shell-send-buffer =C-c C-c=
- python-shell-send-region =C-c C-r=
  
**** python virtual env
- pyvenv-activate 요걸로 선택할 수 있음
- pyvenv-deactivate

#+begin_src emacs-lisp
  (use-package pyvenv
  :config
(pyvenv-mode 1))
#+end_src

*** TypeScript
#+begin_src emacs-lisp
(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))
#+end_src


** lsp-mode
- 기본 키는 window - l 같은 키여서 =C-c l= 로 바꿈
- completion-at-point 를 잘 사용하자 C-down + ivy


#+begin_src emacs-lisp
  (defun efs/lsp-mode-setup()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode)) ;위에 경로 보여주기

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . efs/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))

#+end_src

*** flymake 
- flymake-show-diagnostics-buffer : error, warning진단을 보여줌
  flycheck-list-errors ;요건 동작안함
  #+begin_src emacs-lisp
(use-package flymake-diagnostic-at-point
  ;:after flymake
  :config
  (add-hook 'flymake-mode-hook #'flymake-diagnostic-at-point-mode))

  #+end_src
  
*** lsp with python-mode

- lsp-find-defenition =C-c l g g=
- lsp-find-reference =C-c l g r= C-j, C-k로 위아래
- lsp-rename =C-c l r r=
- lsp-format-buffer =C-c l = == ;default = flake8
- lsp-format-region =C-c l = r=
- python lsp-mode
  =M-x eshell=
#+begin_src shell
  pip install 'python-lsp-server[all]'
#+end_src
- projectile-test-project "pytest" 라는 명령으로 테스트 하도록
  그 버퍼에서 g r 누르면 다시 테스트함(evil mode인경우)
  다른 버퍼면 M-x recompile 커맨드 누름 됨

*** lsp with typescript

#+begin_src shell
npm i -g typescript-language-server; npm i -g typescript
#+end_src


*** Company Mode

- company mode는 completion-at-point보다 보기 좋게 만들어줌
- tab이 선택을 의미하게 만듬. 글자가 없을때 tab은 인덴트를 의미하게도 만듬
- 최소 1자이상 그리고 바로 팝업 발생하게 만듬
- company-mode시작하면 company-box-mode도 시작하게 훅을 해둠

#+begin_src emacs-lisp
(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
  :hook (company-mode . company-box-mode))
#+end_src

*** lsp-ui

- 조금더 IDE처럼 만들어줌 doc string을 보여주기도 하고
- https://github.com/emacs-lsp/lsp-ui
- lsp-ui-doc-focus-frame 하면 그곳에 포커스가 가고 하면 빠져나옴
- lsp-ui-doc-unfocus-frame 하면 빠져나옴

- lsp-ui-peek-find-defenition (C-c l G g)
- lsp-ui-peek-find-reference (C-c l G r) C-n, C-p로 위아래
  단점은 버퍼를 많이 열어둠

#+begin_src emacs-lisp
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode))
;:custom
;(lsp-ui-doc-position 'bottom))
#+end_src

***  lsp treemacs
- nerd tree같이 보여줌
- lsp-treemacs-symbols
- lsp-treemacs-references
- treemacs
#+begin_src emacs-lisp
(use-package lsp-treemacs
  :after lsp)
#+end_src

*** lsp ivy
- symbol 을 입력해서 검색하는것 ;lsp server가 지원할 경우
  lsp-ivy-workspace-symbol
  #+begin_src emacs-lisp
  (use-package lsp-ivy)
  #+end_src

** debugging
*** python debugging

#+begin_src shell
  pip install debugpy
#+end_src

#+begin_src emacs-lisp
;(dap-python-debugger 'debugpy)
#+end_src

* File/Dir Local Valiables
Run =M-x normal-mode= to active
특정 파일/디렉토리에 대한 세팅
Two forms:
#+begin_src emacs-lisp
;; -*- mode: emacs-lisp; tab-width: 8; -*-
#+end_src

#+begin_src emacs-lisp
  
  ;; Local Variables:
  ;; mode: emacs-lisp
  ;; tab-width: 8
  ;; eval; (eldoc-mode 0)
  ;; End:
  
#+end_src

Comands:
- =add-dir-local-variable= : Add local variable to the files in the dir
  파일 모드에 따라 file local variable을 다르게 설정가능
  org-mode magit-diff-mode등
  설정하면 .dir-locals.el파일에 모드별설정이 저장이 됨
  
- =add-file-local-variable= : Add local variable to the file
  add전에 mode를 먼저 셋해야할수 있음
- =delete-file-local-variable= :파일에 있는 변수 삭제
- =copy-file-locals-to-dir-locals=
  :  파일에 있는걸 디렉토리 쪽으로 복사
- =copy-dir-locals-to-file-locals=
  :  디렉토리 있는걸 파일로 복사
- =projectile-edit-dir-locals=

Variables:
=safe-local-variable-values=
=safe-local-eval-forms
=enable-local-variable=
- t 하면 add-file-local-variable 할때 safe하지 않으면 물어봄
- nil하면 안하는거고
- safe하면 safe한것만 됨
- all 무조건 로드
=enable-local-eval=
- maybe하면 기본 프롬프트
- t하면 자동 eval
- nil하면 스킵
  
  



* Org Mode

** 기본 사용법
- head
  *는 첫째 head , =C-<return>= 새로운 아이템을 추가함 동일레벨로, =M-<ret>= 도 동일 대신위
  **는 둘째 head, =M-up= 같은거는 동일레벨에서 위치 위아래로 바꿈,
                 =S-M-up= 하면 레벨 관계없이 한줄단위 변경가능
  S-tab하면 head 아래 보이는걸 줄여주기도 함
- link
  org-insert-link, 글자선택후 =C-c C-l= 하면 하이퍼링크 삽입가능; =C-c C-o= 하면 현재 커서 링크를 열게됨

- table
  table |--|--|--| esc하고 =M-<ret>= 하면 가로줄 생김, =tab= 은 정렬기능 
  
- list
  list 는 - item, 1. item 하고 입력하면 되고 뒤에서 =M-<ret>= 하면 바로 아래줄 아이템 추가
  S-> 하면 리스트 모양 바뀜 - 1) 등등

- check list
 check list [ ]  안에 X넣어도 되고 =C-c C-x C-b= C를 홀드 하고 cxb하면 됨
              =S-M-<ret>= 하면 체크박스 추가됨 (list에서 이키는 체크박스 추가)딴데서는 todo로 사용됨
- souce block
  #+begin_src python
  source
  #+end_src

- TODO
 TODO는 heading에서 todo입력하면 됨 =C-c C-t= 하면 done으로 바뀜 S-방향키 해도 됨

** Org 단축키

https://youtu.be/PNE-mgkZ6HM
- org-agenda org-agenda-list
- org-schedule삽입 =C-c C-s= shift누르고 방향키 한담에 <ret>
- org-todo 상태변경 =C-c C-t=
- org-deadline =C-c C-d=
-  org-deadline-warning-days로 agenda에 나타나는 날자를 정할수 있음
- org-timestamp =C-c .=
- repeated tasks~ every one day, 등등 알람을 계속주는것
-  +1y를 붙이면  +2d +1d등등 하면 됨<2022-02-07 월+1d>
- org-wild-notifer 는 os와 상관없이 노티를 날려주는 패키지
- task state를 줘서 todo 리스트를 관리할수 있음
- counsel-org-tag 한담에 tag를 추가할 수 잇음 M-<ret>해서 여러개 추가나 선택도 가능
- org-agenda-custom-commands, org-tag-alist같은 패키지들로 태그 관리가능.
- org-set-effort 
- org-set-properties effort 5 days =C-c C-x p=
;DONE을 제거하는 방법

** 기본 설정

강의 https://youtu.be/VcgjTEa0kU4

#+begin_src emacs-lisp
  (defun efs/org-mode-setup()
    (org-indent-mode)
    ;(variable-pitch-mode 1)
    ;(auto-fill-mode 0)
    (visual-line-mode 1))
    ;(setq evil-auto-indent nil))
                                          ;(use-package toc-org)
#+end_src

** Org custom 설정

#+begin_src emacs-lisp
    (use-package org
      :hook (org-mode . efs/org-mode-setup) ;훅을 쓰는 이유는 org buffer시작할때마다 위에설정 호출해서 그버퍼는 변수상태로 셋업하기 위함.
      :config
      (setq org-ellipsis " ▾" ; S-tab하면 ... 나오는걸 이걸로 바꾸기 위함
            org-hide-emphasis-markers t)) ;bold link등 */같은거 안보이게
      (setq org-agenda-start-with-log-mode t)
      (setq org-log-done 'time)
      (setq org-log-into-drawer t)
      (setq org-agenda-files ; agenda에서 관리할 파일 리스트로 ""다음줄에 ""또넣어도됨
            '("~/workspace/org/tasks.org"
              "~/workspace/org/test.org")) ; '요거 하나는 뒤에가 리스트라는 의미로 펑션콜이 아님을 의미

    ;todo의 종류들을 추가하는 것으로 |기준으로 active냐 종료상태를 좌우로 나뉨
    (setq org-todo-keywords
          '((sequenct "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVITE(a)" "REVIEW(v)" "WAIT(w@/!)" "|" "COMPLETED(c)" "CANC(k@)")))
    (setq org-refile-targets
          '((nil :maxlevel . 1)
           (org-agenda-files :maxlevel . 1)))

  ;(advice-add 'org-refile :after 'org-save-all-org-buffers)
  ;이렇게 하면 org-refile실행시 바로 org-save-all-org-buffers가 실행이됨
#+end_src

#+RESULTS:
: ((nil :maxlevel . 1) (org-agenda-files :maxlevel . 1))

** Head 를 좀더 멋지게 수정

#+begin_src emacs-lisp
  ;head마다 다른 사이즈
  (require 'org-faces)
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.0)
                  (org-level-6 . 1.0)
                  (org-level-7 . 1.0)
                  (org-level-8 . 1.0)))
    (set-face-attribute (car face) nil :font "D2Coding" :weight 'medium :height (cdr face)))
  ;head마다 끝에만 보이게 하되 글자를 다음처럼 바꾸라
  (use-package  org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  ; list hyphen 을 dot으로 수정
  ; 정규식으로 이걸 만듬
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                              (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src

** Org Mode 가운데 정렬

#+begin_src emacs-lisp
;;visual fill mode는 org mode가 왼쪽에 치우친걸 상황을 바꿈
;set margins mode
;(defun efs/org-mode-visual-fill ()
;  (setq visual-fill-column-width 110
;        visual-fill-column-center-text t)
;  (visual-fill-column-mode 1))
;(use-package visual-fill-column
;  :hook (org-mode . efs/org-mode-visual-fill))
#+end_src

** Org Capture

#+begin_src emacs-lisp
;org-capture
;org-capture-templates
;(setq org-capture-templates
;  `(("t" "Tasks / Projects")
;    ("tt" "Task" entry (file+olp ,(dw/org-path "Projects.org") "Projects" "Inbox")
;         "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
;    ("ts" "Clocked Entry Subtask" entry (clock)
;         "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
;    ("tp" "New Project" entry (file+olp ,(dw/org-path "Projects.org") "Projects" "Inbox")
;         "* PLAN %?\n  %U\n  %a\n  %i" :empty-lines 1)
;
;    ("j" "Journal Entries")
;    ("jj" "Journal" entry
;         (file+olp+datetree ,(dw/get-todays-journal-file-name))
;         ;"\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
;         ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
;         :clock-in :clock-resume
;         :empty-lines 1)
;    ("jm" "Meeting" entry
;         (file+olp+datetree ,(dw/get-todays-journal-file-name))
;         "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
;         :clock-in :clock-resume
;         :empty-lines 1)
;    ("jt" "Thinking" entry
;         (file+olp+datetree ,(dw/get-todays-journal-file-name))
;         "\n* %<%I:%M %p> - %^{Topic} :thoughts:\n\n%?\n\n"
;         :clock-in :clock-resume
;         :empty-lines 1)
;    ("jc" "Clocked Entry Notes" entry
;         (file+olp+datetree ,(dw/get-todays-journal-file-name))
;         "* %<%I:%M %p> - %K :notes:\n\n%?"
;         :empty-lines 1)
;    ("jg" "Clocked General Task" entry
;         (file+olp+datetree ,(dw/get-todays-journal-file-name))
;         "* %<%I:%M %p> - %^{Task description} %^g\n\n%?"
;         :clock-in :clock-resume
;         :empty-lines 1)
;
;    ("w" "Workflows")
;    ("we" "Checking Email" entry (file+olp+datetree ,(dw/get-todays-journal-file-name))
;         "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)
;
;    ("m" "Metrics Capture")
;    ("mw" "Weight" table-line (file+headline "~/Notes/Metrics.org" "Weight")
;     "| %U | %^{Weight} | %^{Notes} |" :kill-buffer)
;    ("mp" "Blood Pressure" table-line (file+headline "~/Notes/Metrics.org" "Blood Pressure")
;     "| %U | %^{Systolic} | %^{Diastolic} | %^{Notes}" :kill-buffer)))

#+end_src

** Org Alert
- install 할때 org-plus-contrib가 있는지 보고 설치함
- =DBUS ERROR=
: eval &(dbus-launch)
: export DBUS_SESSIN_BUS_ADDRESS
: emacs

- =org-notify-add= 확인
#+begin_src emacs-lisp
  (use-package org
  :ensure org-plus-contrib)

  (use-package org-notify
  :ensure nil
  :after org
  :config
  (org-notify-start)
  (org-notify-add
   'default
   '(:time "10m" :period "5s" :duration 100 :actions -notify)
   '(:time "7m" :period "5s" :duration 50 :actions -notify/window))
  (org-notify-add
   'reminder
   '(:time "10m" :period "5s" :duration 100 :actions -notify)))
#+end_src

** Org Babel 

*** 코드블럭 실행
- M-x org-babel-execute-src-block
- 단축키 블럭에 가서 C-c C-c

- org-confirm-babel-evaluate nil 하면 실행시 팝업 띄울지 아니오로

- file local value를 아래형태로 셋해서 저장할때 실행도 가능
- (add-hook 'after-save-hook #'org-babel-execute-buffer t t)
  -> t t가 이 버퍼만 셋하겠다는 의미?

- #+begin_src python :results output
- #이렇게 하면 print한 결과가 result에 나옴
- #+end_src

- #+begin_src python :results value
- #이렇게 하면 return한 결과가 result에 나옴
- #+end_src

*** Tangle
- #+PROPERTY: header-args:emacs-lisp :tangle ./init-new.el하면 모든 내용이 저 파일로 옮겨짐
- org-babel-tangle C-c C-v t 블록을 딴 파일에 저장.
  이걸 이용해서 emacs를 시작하도록 하면 됨.
- #+begin_src python :tangle ./newpython.py
  org-babel-tangle-file "파일명" 으로 자동으로 해당파일을 tangle하도록 할 수 있음

- #+PROPERTY: header-args:emacs-lisp :tangle ./init-new.el
  
#+begin_src emacs-lisp
  ; org-babel에서 사용할수 있는 언어 등록
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))


  (setq org-confirm-babel-evaluate nil) ;;실행할지 묻는거 끄기
  (setq org-babel-python-command "python3") ;;python3써라

  ;;<py 입력후 탭 하면 블록이 생김
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

  ;이 파일을 저장하면 자동으로 tangle해서 저장하도록 하고싶다면
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "/Users/eddie/.emacs.d/init.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))
   (add-hook 'org-mode-hook (lambda ()(add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src


- output파일에 폴더 생성 원할시 =:mkdirp yes= 를 추가
  #+begin_src emacs-lisp
  ;(push '("confi-unix" . confi-unix) org-src-lang-mode)
  #+end_src

  #+begin_src conf :tangle ~/dummy.conf :mkdirp yes
	;value = 42

  #+end_src

*** Noweb

- 블럭의 결과를 다른 블럭에 쓰거나 할때 씀 json이나 txt파일들을 쓸때도 씀.
- :noweb yes하면 값을 가져올 수 있음

#+NAME: the-value
  #+begin_src emacs-lisp
;(+ 55 100)
  #+end_src

  #+RESULTS: the-value
  : 155


#+begin_src python :noweb yes :results output
	print(<<the-value()>>)
#+end_src

#+RESULTS:
: 155
* Terminal
** vterm
#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :config
    (setq vterm-max-scrollback 10000))
#+end_src
** eshell
#+begin_src emacs-lisp
  (defun efs/configure-eshell()
    ;;save command history
    (add-hock 'eshell-pre-command-hook 'eshell-save-some-history)
    ;; truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffers)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)
    (setq eshell-history-size 10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt)

  (use-package eshell
    :hook (eshell-first-time-mode . efs/configure-eshell)
    :config
    (eshell-git-prompt-use-theme 'powerline))
  
#+end_src

* 각종 팁
 - system-type변수에는 현재 환경이 windows인지 등이 나옴
