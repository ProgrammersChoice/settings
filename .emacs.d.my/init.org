#+TITLE Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle /Users/eddie/.emacs.d/init.el

- [[#basic-configuration][Basic Configuration]]

* Basic shortcut

  |----------------------+----------------------------|
  | 텍스트 크기조절      | C-x C-0 누른 후 + 하거나 - |
  |----------------------+----------------------------|
  | 한줄실행             | C-x C-e                    |
  |----------------------+----------------------------|
  | 바로 실행            | M-: Eval                   |
  |----------------------+----------------------------|
  | 명령어 찾기          | M-x                        |
  |----------------------+----------------------------|
  | 현재 단어 하이라이트 | M-s h .                    |
  |----------------------+----------------------------|
  | 정규식 하이라이트    | M-s h r                    |
  |----------------------+----------------------------|
  | 하이라이트 삭제      | M-s h u                    |
  |----------------------+----------------------------|
  | 파일 북마크 추가     | C-x r m                    |
  |----------------------+----------------------------|
  | bookmark jump        | C-x r b                    |
  |----------------------+----------------------------|
  | list bookmark        | C-x r l                    |
  |----------------------+----------------------------|

* Basic Configuration

** clean up Emacs user interface, make it minimal.

#+begin_src emacs-lisp
(setq inhibit-startup-message t)

;(unless dw/is-termux
(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)       ; Give some breathing room

(menu-bar-mode -1)            ; Disable the menu bar

;; Set up the visible bell
(setq visible-bell nil)
(setq ring-bell-function 'ignore)
#+end_src

** package setup

- use-package는
  ensure t은 package가 로컬에 없을때 다운로드 하게함
  init은 패키지 로드 전 실행랄 코드
  command 는 autoload명령으로 init과 config사이 동작
  config는 패키지 로드 후 실행할 내용
  bind는 M-x describe-personal-keybinding 에 키 바인딩 적재 시킴
  이것과 동일하게 일을 시키는건 아래와 같음
   init
   (bind-key "C-." 'ace-jumbp-mode))
  bind-keymap은 비슷한데 그 패키지에 정의된 keymap만 사용가능

#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
;; Fix an issue accessing the ELPA archive in Termux
;(when dw/is-termux
;  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))
(require 'use-package)

;; Uncomment this to get a reading on packages that get loaded at startup
;;(setq use-package-verbose t)

;; On non-Guix systems, "ensure" packages by default
(setq use-package-always-ensure t)
#+end_src

** Custom packages

#+begin_src emacs-lisp
(custom-set-variables
 '(package-selected-packages
   '(evil-magit magit ag rg ripgrep hydra evil-collection undo-tree evil general all-the-icons-dired doom-modeline marginalia vertico command-log-mode use-package)))
(custom-set-faces
 )
#+end_src

* Interface settings

** Set font 

#+begin_src emacs-lisp
(set-face-attribute 'default nil :family "D2Coding" :height 130)
(setq default-input-method "korean-hangul")
#+end_src

** Line number

#+begin_src emacs-lisp
(column-number-mode) 
(global-display-line-numbers-mode t) ;t 는 시작시 묻지말고 셋하라는 의미
;; Enable line numbers for some modes
(dolist (mode '(term-mode-hook
		eshell-mode-hook
		shell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
(dolist (mode '(text-mode-hook
                prog-mode-hook
                conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 1))))
#+end_src

** Mode line

#+begin_src emacs-lisp
(require 'doom-modeline)
(doom-modeline-mode 1)

(use-package all-the-icons
  :if (display-graphic-p)
  :commands all-the-icons-install-fonts
  :init
  (unless (find-font (font-spec :name "all-the-icons"))
    (all-the-icons-install-fonts t)))

(use-package all-the-icons-dired
  :if (display-graphic-p)
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom (doom-modeline-height 15))
#+end_src

** Theme

#+begin_src emacs-lisp
(use-package doom-themes)
(load-theme 'doom-gruvbox 1)
#+end_src

** Delimiter

#+begin_src emacs-lisp
(use-package  rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Helpful functions

#+begin_src emacs-lisp
(use-package  which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0))

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . helpful-function)
  ([remap describe-symbol] . helpful-symbol)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-command] . helpful-command)
  ([remap describe-key] . helpful-key))

(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Key settings

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup t)
  (general-create-definer my/leader-keys
    :keymaps '(normal insert visual emacs)
    ;:prefix "C-M"
    :global-prefix "C-SPC")
  (my/leader-keys
   "ts" '(load-theme :which-key "choose theme")))

(use-package undo-tree
  :init
  (setq undo-tree-auto-save-history nil)
  (global-undo-tree-mode 1))
#+end_src

** Evil Mode

#+begin_src emacs-lisp
(use-package evil
  ;; Pre-load configuration
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  (setq evil-respect-visual-line-mode t)
  (setq evil-undo-system 'undo-tree)

  :config
  ;; Activate the Evil
  (evil-mode 1)

  ;; Set Emacs state modes
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src


* Completion System

** Vertico

#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :bind (:map vertico-map
	      ("C-j" . vertico-next)
	      ("C-k" . vertico-previous)
	      ("C-f" . vertico-exit)
	      :map minibuffer-local-map
	      ("M-h" . backward-kill-word))
  :custom
  (vertico-cycle t)
  :init
  (vertico-mode))

(use-package savehist
  :init
  (savehist-mode))

(use-package marginalia
  :after vertico
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))

#+end_src

* Coding related

** Projectile

- projectile파일을 폴더에 넣으면 프로젝트로 인식함 .git이 있어도 됨
- 모든 프로젝타일 키를 C-c p 로 트리거하겠다
- C-c p f이후 M-o하면 메뉴가 많아지는데 스크롤 방법을 모름.
- counsel-projectil-rg = c-p-s-r


#+begin_src emacs-lisp
;https://youtu.be/INTu30BHZGk
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map) ;;모든 프로젝타일 키를 C-c p 로 트리거하겠다
  :init
  (when (file-directory-p "~/workspace")
    (setq projectile-project-search-path '("~/workspace")))
  (setq projectile-switch-project-action #'projectile-dired))

;C-c p f이후 M-o하면 메뉴가 많아지는데 스크롤 방법을 모름.
;counsel-projectil-rg = c-p-s-r
(use-package counsel-projectile
  :config (counsel-projectile-mode))

#+end_src

** Search

#+begin_src emacs-lisp
(use-package rg)
(use-package ag)
#+end_src

** Magit

- magit diff가 다른 windows에 돌아서 이걸 현재 윈도우에서 하게 하는설정
- C-x g : magit-status가 가장 많이 쓰는데
- commands magit-status같은걸 하게하는건데 show function magit-status에서 autoload가보면 magit-status를 기본적으로 하게 바뀌어서 사실 설정할 필요는 없음.

#+begin_src emacs-lisp
(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src


- C-c g magit status 모드로 진입 s는 스테이지 u는 언스테이지 ?는 단축키 보기 fixup은 rebase하고 amend하는 역할

#+begin_src emacs-lisp
  ;(require 'evil-magit)
  ;(use-package evil-magit
  ;  :after magit)
#+end_src

- ghub같은 api가 필요함, 하는일은 issue나 pull같은것 처리
- magit status buffer와 연동해서 issue같은걸 보여줌
- forge-create-pull-request 같은거를 만들수도 있음

#+begin_src emacs-lisp
;(use-package forge)
#+end_src 

* Org Mode

** 기본 사용법
- head
  *는 첫째 head , C-<return> 새로운 아이템을 추가함 동일레벨로, M-<ret> 도 동일 대신위
  **는 둘째 head, M-up 같은거는 동일레벨에서 위치 위아래로 바꿈,
                 S-M-up하면 레벨 관계없이 한줄단위 변경가능
  S-tab하면 head 아래 보이는걸 줄여주기도 함
- link
  org-insert-link, 글자선택후 C-c C-l하면 하이퍼링크 삽입가능; C-c C-o하면 현재 커서 링크를 열게됨

- table
  table |--|--|--| esc하고 M-<ret> 하면 가로줄 생김, tab은 정렬기능 
  
- list
  list 는 - item, 1. item 하고 입력하면 되고 뒤에서 M-<ret>하면 바로 아래줄 아이템 추가

- check list
 check list [ ]  안에 X넣어도 되고 C-c C-x C-b C를 홀드 하고 cxb하면 됨
              S-M-<ret>하면 체크박스 추가됨 (list에서 이키는 체크박스 추가)딴데서는 todo로 사용됨
- souce block
  #+begin_src python
  source
  #+end_src

- TODO
 TODO는 heading에서 todo입력하면 됨 C-c C-t하면 done으로 바뀜 S-방향키 해도 됨

** Org 단축키

https://youtu.be/PNE-mgkZ6HM
- org-agenda org-agenda-list
- org-schedule삽입 *C-c C-s* shift누르고 방향키 한담에 <ret>
- org-todo 상태변경 C-c C-t
- org-deadline C-c C-d
-  org-deadline-warning-days로 agenda에 나타나는 날자를 정할수 있음
- org-timestamp C-c .
- repeated tasks~ every one day, 등등 알람을 계속주는것
-  +1y를 붙이면  +2d +1d등등 하면 됨<2022-02-07 월+1d>
- org-wild-notifer 는 os와 상관없이 노티를 날려주는 패키지
- task state를 줘서 todo 리스트를 관리할수 있음
- counsel-org-tag 한담에 tag를 추가할 수 잇음 M-<ret>해서 여러개 추가나 선택도 가능
- org-agenda-custom-commands, org-tag-alist같은 패키지들로 태그 관리가능.
- org-set-effort 
- org-set-properties effort 5 days C-c C-x p
;DONE을 제거하는 방법

** 기본 설정

강의 https://youtu.be/VcgjTEa0kU4

#+begin_src emacs-lisp
(defun efs/org-mode-setup()
  (org-indent-mode)
  ;(variable-pitch-mode 1)
  ;(auto-fill-mode 0)
  (visual-line-mode 1))
  ;(setq evil-auto-indent nil))
#+end_src

** Org custom 설정

#+begin_src emacs-lisp
    (use-package org
      :hook (org-mode . efs/org-mode-setup) ;훅을 쓰는 이유는 org buffer시작할때마다 위에설정 호출해서 그버퍼는 변수상태로 셋업하기 위함.
      :config
      (setq org-ellipsis " ▾" ; S-tab하면 ... 나오는걸 이걸로 바꾸기 위함
            org-hide-emphasis-markers t)) ;bold link등 */같은거 안보이게
      (setq org-agenda-start-with-log-mode t)
      (setq org-log-done 'time)
      (setq org-log-into-drawer t)
      (setq org-agenda-files ; agenda에서 관리할 파일 리스트로 ""다음줄에 ""또넣어도됨
            '("~/workspace/org/tasks.org"
              "~/workspace/org/test.org")) ; '요거 하나는 뒤에가 리스트라는 의미로 펑션콜이 아님을 의미

    ;todo의 종류들을 추가하는 것으로 |기준으로 active냐 종료상태를 좌우로 나뉨
    (setq org-todo-keywords
          '((sequenct "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVITE(a)" "REVIEW(v)" "WAIT(w@/!)" "|" "COMPLETED(c)" "CANC(k@)")))
    (setq org-refile-targets
          '((nil :maxlevel . 1)
           (org-agenda-files :maxlevel . 1)))

  ;(advice-add 'org-refile :after 'org-save-all-org-buffers)
  ;이렇게 하면 org-refile실행시 바로 org-save-all-org-buffers가 실행이됨
#+end_src

** Head 를 좀더 멋지게 수정

#+begin_src emacs-lisp
;head마다 다른 사이즈
(require 'org-faces)
(dolist (face '((org-level-1 . 1.2)
                (org-level-2 . 1.1)
                (org-level-3 . 1.05)
                (org-level-4 . 1.0)
                (org-level-5 . 1.0)
                (org-level-6 . 1.0)
                (org-level-7 . 1.0)
                (org-level-8 . 1.0)))
  (set-face-attribute (car face) nil :font "D2Coding" :weight 'medium :height (cdr face)))
;head마다 끝에만 보이게 하되 글자를 다음처럼 바꾸라
(use-package  org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

; list hyphen 을 dot으로 수정
; 정규식으로 이걸 만듬
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                            (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src

** Org Mode 가운데 정렬

#+begin_src emacs-lisp
;;visual fill mode는 org mode가 왼쪽에 치우친걸 상황을 바꿈
;set margins mode
;(defun efs/org-mode-visual-fill ()
;  (setq visual-fill-column-width 110
;        visual-fill-column-center-text t)
;  (visual-fill-column-mode 1))
;(use-package visual-fill-column
;  :hook (org-mode . efs/org-mode-visual-fill))
#+end_src

** Org Capture

#+begin_src emacs-lisp
;org-capture
;org-capture-templates
;(setq org-capture-templates
;  `(("t" "Tasks / Projects")
;    ("tt" "Task" entry (file+olp ,(dw/org-path "Projects.org") "Projects" "Inbox")
;         "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
;    ("ts" "Clocked Entry Subtask" entry (clock)
;         "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
;    ("tp" "New Project" entry (file+olp ,(dw/org-path "Projects.org") "Projects" "Inbox")
;         "* PLAN %?\n  %U\n  %a\n  %i" :empty-lines 1)
;
;    ("j" "Journal Entries")
;    ("jj" "Journal" entry
;         (file+olp+datetree ,(dw/get-todays-journal-file-name))
;         ;"\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
;         ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
;         :clock-in :clock-resume
;         :empty-lines 1)
;    ("jm" "Meeting" entry
;         (file+olp+datetree ,(dw/get-todays-journal-file-name))
;         "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
;         :clock-in :clock-resume
;         :empty-lines 1)
;    ("jt" "Thinking" entry
;         (file+olp+datetree ,(dw/get-todays-journal-file-name))
;         "\n* %<%I:%M %p> - %^{Topic} :thoughts:\n\n%?\n\n"
;         :clock-in :clock-resume
;         :empty-lines 1)
;    ("jc" "Clocked Entry Notes" entry
;         (file+olp+datetree ,(dw/get-todays-journal-file-name))
;         "* %<%I:%M %p> - %K :notes:\n\n%?"
;         :empty-lines 1)
;    ("jg" "Clocked General Task" entry
;         (file+olp+datetree ,(dw/get-todays-journal-file-name))
;         "* %<%I:%M %p> - %^{Task description} %^g\n\n%?"
;         :clock-in :clock-resume
;         :empty-lines 1)
;
;    ("w" "Workflows")
;    ("we" "Checking Email" entry (file+olp+datetree ,(dw/get-todays-journal-file-name))
;         "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)
;
;    ("m" "Metrics Capture")
;    ("mw" "Weight" table-line (file+headline "~/Notes/Metrics.org" "Weight")
;     "| %U | %^{Weight} | %^{Notes} |" :kill-buffer)
;    ("mp" "Blood Pressure" table-line (file+headline "~/Notes/Metrics.org" "Blood Pressure")
;     "| %U | %^{Systolic} | %^{Diastolic} | %^{Notes}" :kill-buffer)))

#+end_src

** Org Babel 

*** 코드블럭 실행
- M-x org-babel-execute-src-block
- 단축키 블럭에 가서 C-c C-c

-  #+begin_src python :results output
-  #이렇게 하면 print한 결과가 result에 나옴
-  #+end_src

- #+begin_src python :results value
- #이렇게 하면 return한 결과가 result에 나옴
-  #+end_src

*** Tangle
- #+PROPERTY: header-args:emacs-lisp :tangle ./init-new.el하면 모든 내용이 저 파일로 옮겨짐
- org-babel-tangle C-c C-v t 블록을 딴 파일에 저장.
  이걸 이용해서 emacs를 시작하도록 하면 됨.
- #+begin_src python :tangle ./newpython.py
  org-babel-tangle-file "파일명" 으로 자동으로 해당파일을 tangle하도록 할 수 있음

- #+PROPERTY: header-args:emacs-lisp :tangle ./init-new.el
  
#+begin_src emacs-lisp
; org-babel에서 사용할수 있는 언어 등록
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)))

(setq org-confirm-babel-evaluate nil) ;;실행할지 묻는거 끄기
(setq org-babel-python-command "python3") ;;python3써라

;;<py 입력후 탭 하면 블록이 생김
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))

;이 파일을 저장하면 자동으로 tangle해서 저장하도록 하고싶다면
(defun efs/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
		      (expand-file-name "/Users/eddie/.emacs.d/init.org"))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))
 (add-hook 'org-mode-hook (lambda ()(add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src


