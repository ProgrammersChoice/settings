#+title: emacs configuration
#+property: header-args:emacs-lisp :tangle ./desktop.el :mkdirp yes
* EXWM
** setup
- https://github.com/ch11ng/exwm
- 우분투 셋업 방법
  - desktop file을 만들면 되는데, session type을 정의 login manager(gdm)등이 알도록
#+begin_src sh
sudo apt install emacs git fonts-firacode fonts-cantarell
#+end_src
 
- =~/.emacs.d/exwm/EXWM.desktop=
- =~/.emacs.d/exwm/exwm.sh=
- sudo ln -f ~/.emacs.d/exwm/EXWM.desktop /usr/share/xsessions/EXWM.desktop
  window manager가 정상적으로 동작하도록 

** managing windows
- M-& launch a process asynchronously
- s-& launch without popup(counsel-linux-app)
- windmove-swap-states-left/right/up/down : 윈도우 위치 이동
- buf-move 하고 방향키면 다됨
- exwm-floating-toggle-floting 화면 움직이게 =C-c C-t C-f=
- 모드라인 지우기 C-c C-t ret
  : 창 크기 조절 eval한 이후에
  : (exwm-layout-shrink-window 200)
  : (exwm-layout-shrink-window-horizontally 200)
  : (frame-pixel-width) ;창 선택후에
  : (frame-pixel-height) ;창 선택후에
- exwm-workspace-move-window =C-c Ret= 하면 창 위치 선택 가능
- exwm-layout-toggle-fullscreen 
- exwm-layout-set-fullscreen =C-c C-f= 특징은 키들도 안먹음
- exwm-workspace-switch-to-buffer 하면 모든 윈도우에 있는 버퍼 리트스가 떠서 그걸로 스위치 가능한데 그 윈도우로 감 그래서 현재윈도우로 뜨게하려면 아래 컨픽으를 셋업하면 됨
  : ;; Automatically move EXWM buffer to curren workspace when selected
  : (setq exwm-layout-show-all-buffers t)
** workspaces
- s+(0-9) 워크 스페이스 스위치
- s+w 워크 스페이스 선택 + - 하면 추가도 됨
- C-c RET : 다른 워크스페이스로 이동
** emac resolution
arandr : sudo apt install arandr

** System tray
- C-q C-c : copy firefox등에서
  #+begin_src shell
  sudo apt install blueman pasystray pavucontrol #bt컨트롤, 볼륨컨트롤pavucontrol 그냥실행하면 ui로 뜸
  #+end_src
  
#+begin_src emacs-lisp
  
  (defun efs/run-in-background (command)
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))
  
    ;; --bg-scale은 전체를 체우겠다는 의미
  (defun efs/set-wallpaper()
    (interactive)
    (start-process-shell-command "feh" nil "feh --bg-scale ~/.emacs.d/newyork8k2.jpg"))
  
  (defun efs/exwm-init-hook ()
    ;; Make workspace 1 be the one where we land at startup
    (exwm-workspace-switch-create 1)
  
    ;; enable polybar
    ;;(efs/start-panel)
  
    (efs/run-in-background "nm-applet") ;시스템 트레이에 네트워크 아이콘 보이게
    (efs/run-in-background "pasystray") ;시스템 트레이에서 볼륨조절
    (efs/run-in-background "blueman-applet")) ;시스템 트레이에 블루투스 아이콘 보이게
  
  ;버퍼 이름을 프로그램 이름으로 하는 함수
  (defun efs/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))
  
  (defun efs/exwm-update-title ()
    (pcase exwm-class-name
      ("Firefox" (exwm-workspace-rename-buffer (format "Firefox: %s" exwm-title)))))
  
  (defun efs/configure-window-by-class ()
    (interactive)
    ;(message ("Window '%s' appeared!" exwm-class))
    (pcase exwm-class-name
      ;("Firefox" (exwm-workspace-move-window 2))
      ;("Sol" (exwm-workspace-move-window 3))
      ("mpv" (exwm-floating-toggle-floating)
             (exwm-layout-toggle-mode-line))))
  
  (defun efs/update-displays ()
    (efs/run-in-background "autorandr --change --force")
    (efs/set-wallpaper)
    (message "Display config: %s"
             (string-trim (shell-command-to-string "autorandr --current"))))
  
  
  (use-package exwm
    :config
    ;; Set the default number of workspaces
    (setq exwm-workspace-number 5)
  
    ;; When window "class" updates, use it to set the buffer name
    (add-hook 'exwm-update-class-hook #'efs/exwm-update-class)
  
    ;; When window title updates, use it to set the buffer name
    (add-hook 'exwm-update-title-hook #'efs/exwm-update-title)
  
    ;; Configure windows as they're created
    (add-hook 'exwm-manage-finish-hook #'efs/configure-window-by-class)
  
    ;; Automatically move EXWM buffer to curren workspace when selected
    (setq exwm-layout-show-all-buffers t)
  
    ;; Display all EXWM buffers in every workspace buffer list
    (setq exwm-workspace-show-all-buffers t)
  
    ;; Rebind CapsLock to Ctrl
    ;(start-process-shell-command "xmodmap" nil "xmodmap ~/.emacs.d/exwm/Xmodmap")
    (require 'exwm-randr)
    (exwm-randr-enable)
    ;(start-process-shell-command "xrandr" nil "xrandr --output Virtual-1 --primary --mode 2560x1600 --pos 0x0 --rotate normal")
  
    ;multi monitor
    ;; Use only one monitor
    ;(start-process-shell-command "xrandr" nil "xrandr --output VGA-0 --off output DVI-D-0 --off --output HDMI-0 --mode 2560x1440 --pos 0x0 --rotate right --output VGA-1-1 --off --output HDMI-1-1 --off --output DP-1-1 --off")
  
    ;; Use two monitor
    (start-process-shell-command "xrandr" nil "xrandr --output VGA-0 --off --output DVI-D-0 --mode 2560x1440 --pos 2160x755 --rotate normal --output HDMI-0 --primary --mode 2560x1440 --pos 0x0 --rotate right --output VGA-1-1 --off --output HDMI-1-1 --off --output DP-1-1 --off")
    (setq exwm-randr-workspace-monitor-plist '(0 "HDMI-0" 1 "HDMI-0" 2 "HDMI-0" 3 "DVI-D-0" 4 "DVI-D-0" 5 "DVI-D-0" 6 "DVI-D-0" 7 "DVI-D-0" 8 "DVI-D-0" 9 "DVI-D-0"))
  
    ;; react to display connectivity change, do initial display update
    (add-hook 'exwm-randr-screen-change-hook #'efs/update-displays)
    (efs/update-displays)
  
    ;; 마우스 커서가 윈도우 따라가게
    (setq exwm-workspace-wrap-cursor t)
    ;; 마우스 커서따라 포커스 따라가게
    (setq mouse-autoselect-window t
          focus-follows-mouse t)
  
    ;; These keys should always pass through to Emacs
    (setq exwm-input-prefix-keys
      '(?\C-x
        ?\C-u
        ?\C-h
        ?\M-x
        ?\M-`
        ?\M-&
        ?\M-:
        ?\C-\M-j  ;; Buffer list
        ?\C-\   ;; Ctrl+Space
        )) ;; Ctrl + \\
  
    ;; Ctrl+Q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)
  
    ;; Set up global key bindings.  These always work, no matter the input state!
    ;; Keep in mind that changing this list after EXWM initializes has no effect.
    (setq exwm-input-global-keys
          `(
            ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
            ([?\s-r] . exwm-reset)
  
            ;; Move between windows
            ([s-left] . windmove-left)
            ([s-right] . windmove-right) ;C-h v desktop-environment-mode-map desktop-environment-lock-screen to cancel the C-l
            ([s-up] . windmove-up)
            ([s-down] . windmove-down)
  
           ;; Launch applications via shell command
            ([?\s-&] . (lambda (command)
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command command nil command)))
  
            ;; Switch workspace
            ([?\s-w] . exwm-workspace-switch)
            ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))
  
            ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
            ,@(mapcar (lambda (i)
                        `(,(kbd (format "s-%d" i)) .
                          (lambda ()
                            (interactive)
                            (exwm-workspace-switch-create ,i))))
                      (number-sequence 0 9))))
  
    (if (eq system-type 'gnu/linux)
      (exwm-enable))
    )
  
  (push ?\C-\\ exwm-input-prefix-keys)
  (require 'exwm-xim)
  (exwm-xim-enable)
  
  
#+end_src

#+RESULTS:
: t

* Desktop Environment
** Desktop key bindings
- M-x Customize-group desktop-environment : 여기가면 밝기나 여러 설정들 가능함
- M-x desktop-environment : 여기가면 밝기나 여러 설정들 가능함
  #+begin_src shell
sudo apt install scrot brightnessctl playerctl
  #+end_src

#+begin_src emacs-lisp
(use-package desktop-environment
  :after exwm
  :config (desktop-environment-mode)
  :custom
  (desktop-environment-brightness-small-increment "2%+")
  (desktop-environment-brightness-small-decrement "2%-")
  (desktop-environment-brightness-normal-increment "5%+")
  (desktop-environment-brightness-normal-decrement "5%-"))
#+end_src
** 로그인시 exwm 보이게
#+begin_src sh :tangle no
sudo ln -f ~/.emacs.d/exwm/EXWM.desktop /usr/share/xsessions/EXWM.desktop
#+end_src

#+begin_src shell :tangle ./exwm/EXWM.desktop :mkdirp yes
[Desktop Entry]
Name=EXWM
Comment=Emacs Window Manager
Exec=sh /home/hongiee/.emacs.d/exwm/start-exwm.sh
TryExec=sh
Type=Application
X-LighDM-DesktopName=exwm
DesktopNames=exwm
#+end_src

** Screen DPI
- dpi가 너무 높아서 글이 작을때
  =~/.emacs.d/exwm/Xresources=
  #+begin_src shell
  #set this to your desired DPI! large number means bigger text and UI
  Xft.dpi: 180
  #+end_src

  add this to =start-exwm.sh= Make sure =xrdb= is installed
  #+begin_src shell :tangle ./exwm/start-exwm.sh :shebang #!/bin/sh
    #xrdb ~/.emacs.d/exwm/Xresources
    
    # Run the screen compositor
    compton &
    
    # Enable screen locking on suspend
    xss-lock -- slock &
    
    exec dbus-launch --exit-with-session emacs -mm --debug-init -l ~/.emacs.d/desktop.el
    
  #+end_src
* Setting a background image
- compton이라는 graphic solution
- install compton(picom can be a better solution)
 #+begin_src shell
   sudo apt install compton
   compton &
 #+end_src

- background image 설정
#+begin_src shell
  sudo apt install feh
  feh --bg-scale /usr/share/backgrounds/matt-mcnulty-nyc-2nd-ave.jpg
#+end_src

- 그리고 emacs.org에 투명화 관련 설정
  ;; set frame transparency
- 그리고 백그라운드 이미지를 feh로 설정
* Mode line mode
#+begin_src emacs-lisp
  ;modeline에 정보 보여주기
  (display-battery-mode 1)
  (setq display-time-day-and-date t)
  ;(setq dislpay-time-format "%m/%d/%y")
  (display-time-mode 1)
#+end_src
* Lock screen
#+begin_src shell
sudo apt install slock xss-lock
#+end_src
* Autorandr
#+begin_src shell
  sudo apt install autorandr
  autorandr --save mobile
  ls ~/.config/autorandr/mobile
  cat ~/.config/autorandr/mobile/config
  autorandr --change
  autorandr --save docked
  autorandr #docked가 현재 세팅임을 보여줌
  autorandr --change mobile
#+end_src

* Tab-mode
** Basic Usage

- =tab-bar-mode= - Enable display of the tab bar
- =tab-new= (~C-x t 2~) - Create a new tab
- =tab-next= (~C-x t o~, evil: ~g t~) - Move to the next tab (also known as =tab-bar-switch-to-next-tab=)
- =tab-bar-switch-to-prev-tab= (evil: ~g T~) - Switch to the previous tab
- =tab-rename= (~C-x t r~) - Rename the current tab (or numbered tab with prefix arg)
- =tab-close= (~C-x t 0~) - Close the current tab
- =tab-close-other= (~C-x t 1~) - Close other tabs
- =tab-bar-undo-close-tab= - Reopen the last closed tab
- =tab-move= (~C-x t m~) - Move the current tab to the right (or left with negative prefix)
- =tab-bar-select-tab-by-name= (~C-x t RET~) - Select tab by name using completion

** Configuring operation

- =tab-bar-new-tab-choice= - The name of a buffer or file to display in new tabs
- =tab-bar-new-tab-to= - Where to place new tabs (left or right of current) - Also a function!
- =tab-bar-tab-name-function= - Control how new tabs are named (can prompt for a name!)

#+begin_src emacs-lisp

  (setq tab-bar-new-tab-choice "*scratch*")

#+end_src

** Configuring tab-bar appearance

- =tab-bar-close-button-show= - Show or hide the close button
- =tab-bar-new-button-show= - Show or hide the new button at the end
- =tab-bar-button-relief= - Control pixel width of tab bar button appearance

- =tab-bar= face - customize text of tabs
- =tab-bar-tab= face - customize the color of the active tab
- =tab-bar-tab-inactive= face - customize the color of inactive tabs

#+begin_src emacs-lisp

  (setq tab-bar-close-button-show nil
        tab-bar-new-button-show nil)

#+end_src

** Using tab-bar-mode without showing the bar

#+begin_src emacs-lisp

;; Don't turn on tab-bar-mode when tabs are created
;(setq tab-bar-show nil)

;; Get the current tab name for use in some other display
(defun efs/current-tab-name ()
  (alist-get 'name (tab-bar--current-tab)))

#+end_src

One downside to this is that =doom-modeline= (currently) stops showing the tab name in the mode line when =tab-bar-mode= isn't turned on.

* edwina
https://github.com/ajgrf/edwina

** What is it?

- Edwina is a dynamic tiling window manager for Emacs
- Provides master/stack window layout like dwm or Xmonad
- Experimental!

Thanks to *X VNA* for suggesting this package!

** Setting it up

#+begin_src emacs-lisp

;  (use-package edwina
;    :ensure t
;    :config
;    (setq display-buffer-base-action '(display-buffer-below-selected))
;    ;; (edwina-setup-dwm-keys)
;    (edwina-mode 1))

#+end_src

** Keybindings

By default these keys are prefixed with =C-c C-w=. Customize =edwina-keymap-prefix= to change the prefix.

|-------------+--------------------------------------|
| Binding     | Action                               |
|-------------+--------------------------------------|
| =r=, =C-r=      | Arrange windows                      |
| =n=, =C-n=, =SPC= | Move to next window                  |
| =p=, =C-p=      | Move to previous window              |
| =N=, =C-S-n=    | Swap places with the next window     |
| =P=, =C-S-p=    | Swap places with the previous window |
| =%=, ={=, =[=     | Decrease the size of the master area |
| =^=, =}=, =]=     | Increase the size of the master area |
| =d=, =C-d=      | Decrease number of windows in master |
| =i=           | Increase number of windows in master |
| =k=, =C-k=      | Delete window                        |
| =RET=         | Cycle window to/from master area     |
| =c=, =C-c=      | Clone current window                 |
|-------------+--------------------------------------|

*TIP:* Set up =dwm=-inspired keys with =(edwina-setup-dwm-keys)=

* Polybar
 #+title: The Perfect Panel: Integrating Polybar with Emacs

** You need a panel!

Polybar (https://polybar.github.io/) is:

- Minimal
- Configurable
- Provides a reliable system tray
- Easy to integrate with Emacs!

** Installing Polybar

First install Polybar using your distro's package manager.  Strangely it's not in Ubuntu 20.04!

Here's [[https://github.com/polybar/polybar/wiki/Compiling][how to compile it]] if your distro doesn't have it (which is rare):

#+begin_src sh

  # Install dependencies on Ubuntu 20.04
  sudo apt update
  sudo apt install -y build-essential git cmake cmake-data pkg-config \
        python3-sphinx libcairo2-dev libxcb1-dev libxcb-util0-dev \
        libxcb-randr0-dev libxcb-composite0-dev python3-xcbgen xcb-proto \
        libxcb-image0-dev libxcb-ewmh-dev libxcb-icccm4-dev clang

  # Clone the repo and compile version
  git clone --recursive https://github.com/polybar/polybar
  cd polybar
  git checkout 3.5.2
  ./build.sh

#+end_src

*NOTE:* The =build.sh= script will ask you about features to enable in the Polybar build.  It is *necessary* to say answer =Y= to the =polybar-msg= feature!  You should also answer =Y= to the question about running =sudo make install=.

Also install some icon fonts:

#+begin_src sh
  
  sudo apt install fonts-font-awesome fonts-material-design-icons-iconfont
  https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/JetBrainsMono.zip
#+end_src

** Basic Polybar config

Tangle this to =.config/polybar/config=
:w
#+begin_src conf :tangle ~/.config/polybar/config :mkdirp yes
  
  ; Docs: https://github.com/polybar/polybar
  ;==========================================================
  
  [settings]
  screenchange-reload = true
  
  [global/wm]
  margin-top = 0
  margin-bottom = 0
  
  [colors]
  background = #282828
  foreground = #ebdbb2
  red        = #fb4934
  green      = #b8bb26
  yellow     = #fabd2f
  blue       = #83a598
  purple     = #d3869b  
  teal       = #8ec97c
  orange     = $fe8019
  gray       = #a89984

  [bar/panel]
  width = 100%
  height = 30
  offset-x = 0
  offset-y = 0
  fixed-center = true
  enable-ipc = true
  
  background = ${colors.background}
  foreground = ${colors.foreground}
  
  line-size = 2
  line-color = ${colors.foreground}
  
  border-size = 0
  border-color = ${colors.background}
  
  padding-top = 5
  padding-left = 1
  padding-right = 1
  
  module-margin = 1
  
  ;font-0 = "Cantarell:size=18:weight=bold;2"
  ;font-1 = "Font Awesome:size=14;2"
  ;font-2 = "Material Icons:size=20;5"
  ;font-3 = "Fira Mono:size=13;-3"
  font-0 = "JetBrains Mon::size=13:weight=regular;2"
  font-1 = "Font Awesome:size=13;2"
  font-2 = "Material Icons:size=20;5"
  font-3 = "Fira Mono:size=13;-3"
  
  modules-left = exwm-workspace
  modules-right = cpu temperature battery date
  
  tray-position = right
  tray-padding = 2
  tray-maxsize = 28
  
  cursor-click = pointer
  cursor-scroll = ns-resize
  
  [module/exwm-workspace]
  type = custom/ipc
  hook-0 = emacsclient -e "exwm-workspace-current-index" | sed -e 's/^"//' -e 's/"$//'
  initial = 1
  format-underline = ${colors.foreground}
  format-padding = 1
  
  [module/cpu]
  type = internal/cpu
  interval = 2
  format = <label> <ramp-coreload>
  format-underline = ${colors.foreground}
  click-left = emacsclient -e "(proced)"
  label = %percentage:2%%
  ramp-coreload-spacing = 0
  ramp-coreload-0 = ▁
  ramp-coreload-0-foreground = ${colors.foreground}
  ramp-coreload-1 = ▂
  ramp-coreload-2 = ▃
  ramp-coreload-3 = ▄
  ramp-coreload-4 = ▅
  ramp-coreload-5 = ▆
  ramp-coreload-6 = ▇
  
  [module/date]
  type = internal/date
  interval = 5
  
  date = "%a %b %e"
  date-alt = "%A %B %d %Y"
  
  time = %l:%M %p
  time-alt = %H:%M:%S
  
  format-prefix-foreground = ${colors.foreground}
  format-underline = ${colors.foreground}
  
  label = %date% %time%
  
  [module/battery]
  type = internal/battery
  battery = BAT0
  adapter = ADP1
  full-at = 98
  time-format = %-l:%M
  
  label-charging = %percentage%% / %time%
  format-charging = <animation-charging> <label-charging>
  format-charging-underline = ${colors.foreground}
  
  label-discharging = %percentage%% / %time%
  format-discharging = <ramp-capacity> <label-discharging>
  format-discharging-underline = ${self.format-charging-underline}
  
  format-full = <ramp-capacity> <label-full>
  format-full-underline = ${self.format-charging-underline}
  
  ramp-capacity-0 = 
  ramp-capacity-1 = 
  ramp-capacity-2 = 
  ramp-capacity-3 = 
  ramp-capacity-4 = 
  
  animation-charging-0 = 
  animation-charging-1 = 
  animation-charging-2 = 
  animation-charging-3 = 
  animation-charging-4 = 
  animation-charging-framerate = 750
  
  [module/temperature]
  type = internal/temperature
  thermal-zone = 0
  warn-temperature = 60
  
  format = <label>
  format-underline = ${colors.foreground}
  format-warn = <label-warn>
  format-warn-underline = ${self.format-underline}
  
  label = %temperature-c%
  label-warn = %temperature-c%!
  label-warn-foreground = ${colors.foreground}
  
#+end_src

Launch it with this command:

#+begin_src sh

polybar panel

#+end_src

** Starting Polybar from Emacs

#+begin_src emacs-lisp
  
  ;; Make sure the server is started (better to do this in your main Emacs config!)
  (server-start)

  (defvar efs/polybar-process nil
    "Holds the process of the running Polybar instance, if any")
  
  (defun efs/kill-panel ()
    (interactive)
    (when efs/polybar-process
      (ignore-errors
        (kill-process efs/polybar-process)))
    (setq efs/polybar-process nil))
  
  (defun efs/start-panel ()
    (interactive)
    (efs/kill-panel)
    (setq efs/polybar-process (start-process-shell-command "polybar" nil "polybar panel")))
  
  (defun efs/send-polybar-hook (module-name hook-index)
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

  (defun efs/send-polybar-exwm-workspace ()
    (efs/send-polybar-hook "exwm-workspace" 1))

  ;; Update panel indicator when workspace changes
  (add-hook 'exwm-workspace-switch-hook #'efs/send-polybar-exwm-workspace)
#+end_src

Now we can start Polybar when EXWM starts up, inside of =efs/exwm-init-hook=:

#+begin_src emacs-lisp
  
  ;; Start the Polybar panel
  (if (eq system-type 'gnu/linux)
    (efs/start-panel)
  )
  
#+end_src

*NOTE:* Disable =exwm-systemtray= before restarting Emacs so that the tray works!

** Requesting information from Emacs

Use the power of =emacsclient=!  We'll cover this more in a video next week.

#+begin_src emacs-lisp

  ;; Make sure the server is started (better to do this in your main Emacs config!)
  ;; (server-start)

#+end_src

Use it to get the EXWM workspace number:

#+begin_src sh

emacsclient -e "exwm-workspace-current-index"

#+end_src

Define a function to call the workspaces whatever you want!

#+begin_src emacs-lisp

(defun efs/polybar-exwm-workspace ()
  (pcase exwm-workspace-current-index
    (0 "")
    (1 "")
    (2 "")
    (3 "")
    (4 "")))

#+end_src

Try it out:

#+begin_src sh

emacsclient -e "exwm-workspace-current-index"

#+end_src

*** Important caveat!

One thing to keep in mind is that this works well for global variables, but not so great for frame parameters!  The timing has to be perfect to get the value of a frame parameter for the workspace frame you land on.  It's possible, but requires more code.

** Adding a workspace indicator to the panel

#+begin_src conf

  modules-left = exwm-workspace

  [module/exwm-workspace]
  type = custom/ipc
  hook-0 = emacsclient -e "(efs/polybar-exwm-workspace)" | sed -e 's/^"//' -e 's/"$//'
  initial = 1
  format-underline = ${colors.foreground}
  format-padding = 1

#+end_src

*NOTE:* The extra =sed= part is necessary!  If you don't have this command available, you can install it from your distro's package repository.

** Sending information from Emacs using hooks

Use the =polybar-msg= command to invoke a "hook index" to have the module update itself:

#+begin_src sh

polybar-msg hook exwm 1

#+end_src

Learn more about the IPC module on the Polybar Wiki: https://github.com/polybar/polybar/wiki/Module:-ipc


** Check out the Polybar wiki

Learn how to configure everything else in Polybar:

https://github.com/polybar/polybar/wiki

Some useful bits from my own configuration:

*** Spotify now playing (requires the =playerctl= app)

- [[https://github.com/daviwil/dotfiles/blame/fa30ecb85b5c6fa4c9ee63e460f2e375756a5c10/Desktop.org#L588-L591][Polybar config]]
- [[https://github.com/daviwil/dotfiles/blob/fa30ecb85b5c6fa4c9ee63e460f2e375756a5c10/.config/polybar/player-status.sh][player-status.sh]]

*** Mail indicator for mu4e

- [[https://github.com/daviwil/dotfiles/blame/fa30ecb85b5c6fa4c9ee63e460f2e375756a5c10/Desktop.org#L383-L388][Emacs config]]
- [[https://github.com/daviwil/dotfiles/blame/fa30ecb85b5c6fa4c9ee63e460f2e375756a5c10/Desktop.org#L593-L598][Polybar config]]

*** Chat indicators for tracking.el

- [[https://github.com/daviwil/dotfiles/blame/fa30ecb85b5c6fa4c9ee63e460f2e375756a5c10/Desktop.org#L390-L405][Emacs config]]
- [[https://github.com/daviwil/dotfiles/blame/fa30ecb85b5c6fa4c9ee63e460f2e375756a5c10/Desktop.org#L600-L604][Polybar config]]
